const moment = require('moment');
const crypto = require('crypto');
const querystring = require('qs'); 
const Payment = require("../models/paymentModel");
const Order = require("../models/orderModel");
const Variant = require("../models/variantModel");
const Product = require("../models/productModel");
const OrderDetail = require("../models/orderdetailModel");
const FlashSale = require("../models/flashsaleModel");

// VNPAY Config
const vnpConfig = require('../config/vnpayConfig');

// H√†m l·∫•y IP client
function getClientIp(_req) { // getClientIp ph·∫£i nh·∫≠n req
    let ipAddr = _req.headers['x-forwarded-for'] ||
        _req.connection.remoteAddress || // req.connection s·∫Ω c√≥ khi l√† request object
        _req.socket.remoteAddress ||     // req.socket s·∫Ω c√≥ khi l√† request object
        _req.connection.socket.remoteAddress;

    if (ipAddr.includes('::ffff:')) {
        ipAddr = ipAddr.split('::ffff:')[1];
    }
    return ipAddr;
}

// 1. T·∫°o URL thanh to√°n VNPAY
const createPayment = async (_req, res) => {
    try {
         const { orderId, amount, bankCode, language = 'vn' } = _req.body;

 if (!orderId || !amount || isNaN(amount) || parseFloat(amount) <= 0) {
            return res.status(400).json({ code: '99', message: 'Invalid or missing orderId or amount.' });
        }

        // L·∫•y th√¥ng tin order t·ª´ DB ƒë·ªÉ ƒë·∫£m b·∫£o amount kh·ªõp
        const currentOrder = await Order.findById(orderId);
        if (!currentOrder) {
            return res.status(404).json({ code: '99', message: 'Order not found.' });
        }
        if (parseFloat(amount) !== currentOrder.totalAmount) {
             return res.status(400).json({ code: '99', message: 'Invalid or mismatched amount with order total.' });
        }

        // T√¨m b·∫£n ghi Payment ƒë√£ t·∫°o trong orderController (tr·∫°ng th√°i pending)
        let existingPayment = await Payment.findOne({ orderId: orderId, paymentMethod: 'vnpay' });

        if (!existingPayment) {
            // Tr∆∞·ªùng h·ª£p n√†y kh√¥ng n√™n x·∫£y ra n·∫øu logic Postorder ƒë√∫ng
            // Nh∆∞ng ƒë·ªÉ ph√≤ng h·ªù, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi (ho·∫∑c b√°o l·ªói)
            return res.status(400).json({ code: '99', message: 'Payment record for this order not found or not VNPAY.' });
        }

        const ipAddr = getClientIp(_req);
        const tmnCode = vnpConfig.vnp_TmnCode;
        const secretKey = vnpConfig.vnp_HashSecret;
        let vnpUrl = vnpConfig.vnp_Url;
        const returnUrl = vnpConfig.vnp_ReturnUrl;

        const date = new Date();
        const createDate = moment(date).format('YYYYMMDDHHmmss');
        const orderId_vnpay = existingPayment.vnp_TxnRef; // S·ª≠ d·ª•ng vnp_TxnRef ƒë√£ l∆∞u t·ª´ Payment model

        let vnp_Params = {};
        vnp_Params['vnp_Version'] = '2.1.0';
        vnp_Params['vnp_Command'] = 'pay';
        vnp_Params['vnp_TmnCode'] = tmnCode;
        vnp_Params['vnp_Amount'] = amount * 100; // S·ªë ti·ªÅn * 100
        if (bankCode) { // `if (bankCode)` s·∫Ω lo·∫°i b·ªè undefined, null, v√† chu·ªói r·ªóng ''
            vnp_Params['vnp_BankCode'] = bankCode;
        }
        vnp_Params['vnp_CreateDate'] = createDate;
        vnp_Params['vnp_CurrCode'] = 'VND';
        vnp_Params['vnp_IpAddr'] = ipAddr;
        vnp_Params['vnp_Locale'] = language;
        vnp_Params['vnp_OrderInfo'] = `Thanh toan don hang: ${orderId_vnpay}`;
        vnp_Params['vnp_OrderType'] = 'other';
        vnp_Params['vnp_ReturnUrl'] = returnUrl;
        vnp_Params['vnp_TxnRef'] = orderId_vnpay; // M√£ giao d·ªãch c·ªßa b·∫°n

        vnp_Params = sortObject(vnp_Params);

        const signData = querystring.stringify(vnp_Params, { encode: false });
        console.log("Sign Data String:", signData); // LOG C√ÅI N√ÄY
        const hmac = crypto.createHmac("sha512", secretKey);
        const secureHash = hmac.update(signData).digest("hex");
        vnp_Params['vnp_SecureHash'] = secureHash;
        vnpUrl += '?' + querystring.stringify(vnp_Params, { encode: false });

        // Tr·∫£ v·ªÅ URL cho frontend ƒë·ªÉ redirect ho·∫∑c redirect tr·ª±c ti·∫øp
        res.status(200).json({
            code: '00',
            message: 'Success',
            data: vnpUrl,
            orderId: orderId,
        });

    } catch (err) {
        console.error('Error in createPayment:', err);
        res.status(500).json({ code: '99', message: 'Internal server error', error: err.message });
    }
};

const paymentReturn = async (req, res) => {
    let vnp_Params = req.query;
    const secureHash = vnp_Params['vnp_SecureHash'];

    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    vnp_Params = sortObject(vnp_Params);

    const secretKey = vnpConfig.vnp_HashSecret;
    const signData = querystring.stringify(vnp_Params, { encode: false });
    const hmac = crypto.createHmac("sha512", secretKey);
    const signed = hmac.update(signData).digest("hex");

    const orderId = vnp_Params['vnp_TxnRef'];
    const responseCode = vnp_Params['vnp_ResponseCode'];
    const transactionStatus = vnp_Params['vnp_TransactionStatus'];
    const vnp_TransactionNo = vnp_Params['vnp_TransactionNo'];

    let message = "Giao d·ªãch kh√¥ng x√°c ƒë·ªãnh.";
    let paymentStatusDB = "pending"; 
    let orderStatusDB = "pending";   
    let orderDetails = [];
    let order = null;

    try {
        if (secureHash === signed) {
            const payment = await Payment.findOne({ orderId: orderId, vnp_TxnRef: orderId });
            order = await Order.findById(orderId);

            if (!payment || !order) {
                message = "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n ho·∫∑c ƒë∆°n h√†ng.";
                orderStatusDB = "cancelled";
                console.warn(`VNPAY_RETURN: Order or Payment record not found for Order ID: ${orderId}`);
            } else if (payment.paymentStatus === 'paid' || payment.paymentStatus === 'failed') {
                message = "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥.";
                paymentStatusDB = payment.paymentStatus;
                orderStatusDB = order.status;
                console.log(`VNPAY_RETURN: Transaction for Order ID: ${orderId} already processed.`);

                orderDetails = await OrderDetail.find({ orderId: order._id })
                    .populate({
                        path: 'productVariantId',
                        populate: {
                            path: 'productID',
                            model: 'products'
                        }
                    });
            } else { // Giao d·ªãch h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
                if (responseCode === '00' && transactionStatus === '00') {
                    message = "Thanh to√°n th√†nh c√¥ng. ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.";
                    paymentStatusDB = "paid";
                    orderStatusDB = "confirmed";

                    orderDetails = await OrderDetail.find({ orderId: order._id }).populate({
                        path: 'productVariantId',
                        populate: {
                            path: 'productID',
                            model: 'products'
                        }
                    });

                    let hasStockIssue = false;
                    for (const detail of orderDetails) {
                        const variant = await Variant.findById(detail.productVariantId).populate('productID');
                        if (!variant || variant.stock < detail.quantity) {
                            hasStockIssue = true;
                            const productName = variant?.productID?.name || 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh';
                            const variantIdentifier = `${productName} (Size: ${variant?.size}, M√†u: ${variant?.color})`;
                            message = `Kh√¥ng ƒë·ªß t·ªìn kho cho bi·∫øn th·ªÉ "${variantIdentifier}". Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.`;
                            paymentStatusDB = "failed";
                            orderStatusDB = "cancelled";
                            break;
                        }
                    }

                    if (!hasStockIssue) {
                        try {
                          for (const detail of orderDetails) {
    // Tr·ª´ Variant stock
    await Variant.findByIdAndUpdate(
        detail.productVariantId,
        { $inc: { stock: -detail.quantity } }
    );

    // TƒÉng purchases cho Product
    const variant = await Variant.findById(detail.productVariantId);
    if (variant && variant.productID) {
        await Product.findByIdAndUpdate(variant.productID, { $inc: { purchases: 1 } });
    }

    // üî• Update FlashSale n·∫øu variant n·∫±m trong flash sale ƒëang ch·∫°y
    await FlashSale.updateOne(
        {
            status: "ƒêang di·ªÖn ra",
            "products.variant_id": detail.productVariantId
        },
        {
            $inc: { "products.$.quantity": -detail.quantity }
        }
    );
}

                            console.log(`VNPAY_RETURN: Stock deducted and purchases updated for Order ID: ${orderId}`);
                        } catch (stockUpdateError) {
                            console.error(`VNPAY_RETURN: Error deducting stock/updating purchases for Order ID ${orderId}:`, stockUpdateError);
                            message = `L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho/l∆∞·ª£t mua. ƒê∆°n h√†ng c√≥ th·ªÉ c·∫ßn ki·ªÉm tra th·ªß c√¥ng.`;
                            paymentStatusDB = "failed";
                            orderStatusDB = "pending_manual_review";
                        }
                    }
                } else {
                    message = `Thanh to√°n kh√¥ng th√†nh c√¥ng. M√£ l·ªói: ${responseCode}. Tr·∫°ng th√°i: ${transactionStatus}.`;
                    paymentStatusDB = "failed";
                    orderStatusDB = "cancelled";
                    console.log(`VNPAY_RETURN: Payment for Order ID ${orderId} failed. Code: ${responseCode}, Status: ${transactionStatus}`);
                }

                payment.paymentStatus = paymentStatusDB;
                payment.vnp_ResponseCode = responseCode;
                payment.vnp_TransactionStatus = transactionStatus;
                payment.vnp_TransactionNo = vnp_TransactionNo;
                // payment.vnp_PayDate = vnp_Params['vnp_PayDate'];
                // payment.vnp_CardType = vnp_Params['vnp_CardType'];
                await payment.save();

                order.status = orderStatusDB;
                await order.save();
                console.log(`VNPAY_RETURN: Final Updated Order ${orderId} to ${orderStatusDB}, Payment to ${paymentStatusDB}`);
            }
        } else {
            message = "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá. Giao d·ªãch kh√¥ng ƒë∆∞·ª£c x√°c minh.";
            paymentStatusDB = "failed";
            orderStatusDB = "cancelled";
            console.error(`VNPAY_RETURN: Invalid Secure Hash for Order ID: ${orderId}. Expected: ${signed}, Received: ${secureHash}`);
        }
    } catch (err) {
        console.error('Error in paymentReturn (outer catch):', err);
        message = 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n.';
        paymentStatusDB = "failed";
        orderStatusDB = "cancelled";
    }
    
    let ejsTemplate = 'success.ejs';
    if (paymentStatusDB === 'failed' || orderStatusDB === 'cancelled') {
        ejsTemplate = 'failed.ejs';
    }
    
    // --- B·ªï sung logic d·ªãch sang ti·∫øng Vi·ªát ·ªü ƒë√¢y ---
    const paymentStatusDisplay = {
        'pending': 'Ch·ªù thanh to√°n',
        'paid': 'ƒê√£ thanh to√°n',
        'failed': 'Th·∫•t b·∫°i'
    }[paymentStatusDB] || 'Kh√¥ng x√°c ƒë·ªãnh';

    const orderStatusDisplay = {
        'pending': 'Ch·ªù x·ª≠ l√Ω',
        'confirmed': 'ƒê√£ x√°c nh·∫≠n',
        'cancelled': 'ƒê√£ h·ªßy',
        'pending_manual_review': 'Ch·ªù ki·ªÉm tra th·ªß c√¥ng'
    }[orderStatusDB] || 'Kh√¥ng x√°c ƒë·ªãnh';
 const clientUrl = process.env.CLIENT_URL || 'http://localhost:4000';
    res.render(ejsTemplate, {
        title: 'K·∫øt qu·∫£ Thanh to√°n',
        responseCode: responseCode,
        message: message,
        orderId: orderId,
        paymentStatus: paymentStatusDisplay, // Truy·ªÅn tr·∫°ng th√°i ti·∫øng Vi·ªát v√†o EJS
        orderStatus: orderStatusDisplay,     // Truy·ªÅn tr·∫°ng th√°i ti·∫øng Vi·ªát v√†o EJS
        vnp_TransactionNo: vnp_TransactionNo,
        orderDetails: orderDetails,
        orderCode: order.orderCode,
        totalAmount: order ? order.totalAmount : 0,
        clientUrl: clientUrl
    });
};


// 3. X·ª≠ l√Ω IPN t·ª´ VNPAY (server-to-server)
const paymentIpn = async (req, res) => {
    let vnp_Params = req.query;
    const secureHash = vnp_Params['vnp_SecureHash'];

    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    vnp_Params = sortObject(vnp_Params);

    const secretKey = vnpConfig.vnp_HashSecret;
    const signData = querystring.stringify(vnp_Params, { encode: false });
    const hmac = crypto.createHmac("sha512", secretKey);
    const signed = hmac.update(signData).digest("hex");

    const orderId = vnp_Params['vnp_TxnRef']; // Order ID c·ªßa b·∫°n
    const vnp_Amount = vnp_Params['vnp_Amount'] / 100; // S·ªë ti·ªÅn t·ª´ VNPAY
    const vnp_ResponseCode = vnp_Params['vnp_ResponseCode'];
    const vnp_TransactionStatus = vnp_Params['vnp_TransactionStatus'];

    try {
        const payment = await Payment.findOne({ orderId: orderId, vnp_TxnRef: orderId });
        const order = await Order.findById(orderId);

        if (!payment || !order) {
            return res.status(200).json({ RspCode: '01', Message: 'Order not found' });
        }

        // 1. Ki·ªÉm tra ch·ªØ k√Ω (Quan tr·ªçng nh·∫•t)
        if (secureHash !== signed) {
            return res.status(200).json({ RspCode: '97', Message: 'Checksum failed' });
        }

        // 2. Ki·ªÉm tra s·ªë ti·ªÅn
        if (vnp_Amount !== payment.amount) {
            return res.status(200).json({ RspCode: '04', Message: 'Amount invalid' });
        }

        // 3. Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
        // N·∫øu giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (paymentStatus ƒë√£ l√† 'paid' ho·∫∑c 'failed')
        if (payment.paymentStatus === 'paid' || payment.paymentStatus === 'failed') {
            return res.status(200).json({ RspCode: '02', Message: 'Order already confirmed' });
        }

        // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i
        if (vnp_ResponseCode === '00' && vnp_TransactionStatus === '00') {
            // Giao d·ªãch th√†nh c√¥ng
            payment.paymentStatus = 'paid';
            order.status = 'confirmed'; // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh ƒë√£ x√°c nh·∫≠n
            await order.save(); // L∆∞u order tr∆∞·ªõc khi save payment ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô
            console.log(`IPN: Order ${orderId} confirmed.`);

        } else {
            // Giao d·ªãch th·∫•t b·∫°i ho·∫∑c c√°c m√£ l·ªói kh√°c
            payment.paymentStatus = 'failed';
            order.status = 'cancelled'; // H·ªßy ƒë∆°n h√†ng n·∫øu thanh to√°n th·∫•t b·∫°i
            await order.save();
            console.log(`IPN: Order ${orderId} failed or cancelled. ResponseCode: ${vnp_ResponseCode}, TransactionStatus: ${vnp_TransactionStatus}`);
        }

        // C·∫≠p nh·∫≠t c√°c th√¥ng tin VNPAY v√†o Payment model
        payment.vnp_Amount = vnp_Amount * 100; // L∆∞u l·∫°i s·ªë ti·ªÅn g·ªëc VNPAY
        payment.vnp_BankCode = vnp_Params['vnp_BankCode'];
        // payment.vnp_CardType = vnp_Params['vnp_CardType'];
        payment.vnp_OrderInfo = vnp_Params['vnp_OrderInfo'];
        // payment.vnp_PayDate = vnp_Params['vnp_PayDate'];
        payment.vnp_ResponseCode = vnp_ResponseCode;
        payment.vnp_TmnCode = vnp_Params['vnp_TmnCode'];
        payment.vnp_TransactionNo = vnp_Params['vnp_TransactionNo'];
        payment.vnp_TransactionStatus = vnp_TransactionStatus;
        payment.vnp_SecureHash = secureHash; // L∆∞u l·∫°i hash ƒë·ªÉ ki·ªÉm tra sau
        await payment.save();

        res.status(200).json({ RspCode: '00', Message: 'Confirm Success' });

    } catch (err) {
        console.error('Error in paymentIpn:', err);
        res.status(200).json({ RspCode: '99', Message: 'Unknown error' }); // VNPAY y√™u c·∫ßu tr·∫£ v·ªÅ 00, 01, 02, 04, 97, 99
    }
};

function sortObject(obj) {
    let sorted = {};
    let str = [];
    let key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
            str.push(encodeURIComponent(key));
        }
    }
    str.sort();
    for (key = 0; key < str.length; key++) {
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}

module.exports = {
    createPayment,
    paymentReturn,
    paymentIpn
};