const brands = require('../models/brandModel'); 
const products = require('../models/productModel'); 
//ch√®n multer ƒë·ªÉ upload file
const multer = require('multer');
const storage = multer.diskStorage({
  destination: function(req, file, cb){
    cb(null, './public/images')
  },
  filename: function(req, file, cb){
    cb(null, file.originalname)
  }
})
const checkfile = (req, file, cb) => {
  if(!file.originalname.match(/\.(jpg|jpeg|png|gif|webp)$/)){
    return cb(new Error('B·∫°n ch·ªâ ƒë∆∞·ª£c upload file ·∫£nh'))
  }
  return cb(null, true)
}
const upload = multer({storage: storage, fileFilter: checkfile});


// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c th∆∞∆°ng hi·ªáu
const getAllBrands = async (req, res) => {
  try {
    const brand = await brands.find();
    res.status(200).json(brand);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving brands', error });
  }
};
// L·∫•y th√¥ng tin chi ti·∫øt m·ªôt th∆∞∆°ng hi·ªáu theo ID
const getBrandById = async (req, res) => { 
  const { id } = req.params;

  try {
    const brand = await brands.findById(id);

    if (!brand) {
      return res.status(404).json({ message: 'Brand not found' });
    }

    res.status(200).json(brand);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving brand', error });
  }
};

// Th√™m m·ªôt th∆∞∆°ng hi·ªáu m·ªõi v·ªõi upload logo
const addBrand = [
  upload.single('image_logo'), // X·ª≠ l√Ω upload ·∫£nh v·ªõi key 'image_logo'
  async (req, res, next) => {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ form g·ª≠i t·ªõi
      const brand = req.body;

      if (req.file) {
        // L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ file ·∫£nh g·ª≠i ƒë·∫øn
        brand.image_logo = req.file.originalname;
      }

      // T·∫°o m·ªôt instance c·ªßa Brand model
      const newBrand = new brands(brand);

      // L∆∞u th∆∞∆°ng hi·ªáu v√†o database
      const data = await newBrand.save();
      res.json(data);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },
];

const editBrand = [
  upload.single('image_logo'), // X·ª≠ l√Ω upload ·∫£nh v·ªõi key 'image_logo'
  async (req, res, next) => {
    try {
      // L·∫•y d·ªØ li·ªáu t·ª´ form g·ª≠i t·ªõi
      const brand = req.body;

      if (req.file) {
        // L·∫•y ·∫£nh t·ª´ file ·∫£nh g·ª≠i ƒë·∫øn
        brand.image_logo = req.file.originalname;
      }

      // C·∫≠p nh·∫≠t th√¥ng tin th∆∞∆°ng hi·ªáu trong c∆° s·ªü d·ªØ li·ªáu
      const data = await brands.findByIdAndUpdate(req.params.id, brand, { new: true });

      if (!data) {
        return res.status(404).json({ message: 'Brand not found' });
      }

      res.json(data);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
];



// X√≥a th∆∞∆°ng hi·ªáu
const deleteBrand = async (req, res) => {
  try {
    const { id } = req.params;

    // üí° B∆Ø·ªöC QUAN TR·ªåNG: Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o thu·ªôc th∆∞∆°ng hi·ªáu n√†y kh√¥ng
    const productsInBrand = await products.find({ brand: id });

    if (productsInBrand.length > 0) {
      // N·∫øu c√≥ s·∫£n ph·∫©m, tr·∫£ v·ªÅ l·ªói 409 v√† kh√¥ng th·ª±c hi·ªán x√≥a
      return res.status(409).json({ message: 'Kh√¥ng th·ªÉ x√≥a th∆∞∆°ng hi·ªáu n√†y v√¨ n√≥ v·∫´n ch·ª©a s·∫£n ph·∫©m.' });
    }

    // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, ti·∫øn h√†nh x√≥a th∆∞∆°ng hi·ªáu
    const deletedBrand = await brands.findByIdAndDelete(id);

    if (!deletedBrand) {
      return res.status(404).json({ message: 'Brand not found' });
    }

    res.status(200).json({ message: 'Brand deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting brand', error });
  }
};
// Xu·∫•t c√°c h√†m controller
module.exports = {
  getAllBrands,
  addBrand,
  editBrand,
  deleteBrand,
  getBrandById
};
