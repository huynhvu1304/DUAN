const mongoose = require('mongoose');
const Voucher = require('../models/voucherModel');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/DB_DATN')
  .then(() => console.log('Connected to MongoDB successfully!'))
  .catch(err => console.error('Failed to connect to MongoDB:', err));

const createSpinWheelVouchers = async () => {
  try {
    console.log('B·∫Øt ƒë·∫ßu t·∫°o voucher cho v√≤ng quay may m·∫Øn...');

    // 1. T·∫°o voucher "Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau"
    let noPrizeVoucher = await Voucher.findOne({ code: 'NO_PRIZE' });
    
    if (!noPrizeVoucher) {
      noPrizeVoucher = new Voucher({
        code: 'NO_PRIZE',
        description: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau',
        discountType: 'fixed',
        discountValue: 0,
        minOrderValue: 0,
        quantity: 999999, // S·ªë l∆∞·ª£ng l·ªõn ƒë·ªÉ kh√¥ng bao gi·ªù h·∫øt
        used: 0,
        startDate: new Date('2020-01-01'),
        endDate: new Date('2030-12-31'),
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 50 // Tr·ªçng s·ªë m·∫∑c ƒë·ªãnh cho "kh√¥ng tr√∫ng th∆∞·ªüng"
      });
      await noPrizeVoucher.save();
      console.log('‚úÖ ƒê√£ t·∫°o voucher NO_PRIZE');
    } else {
      console.log('‚ÑπÔ∏è Voucher NO_PRIZE ƒë√£ t·ªìn t·∫°i');
    }

    // 2. T·∫°o m·ªôt s·ªë voucher m·∫´u cho v√≤ng quay
    const sampleVouchers = [
      {
        code: 'SPIN10K',
        description: 'Gi·∫£m 10,000ƒë cho ƒë∆°n h√†ng t·ª´ 100,000ƒë',
        discountType: 'fixed',
        discountValue: 10000,
        minOrderValue: 100000,
        quantity: 100,
        used: 0,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 20
      },
      {
        code: 'SPIN20K',
        description: 'Gi·∫£m 20,000ƒë cho ƒë∆°n h√†ng t·ª´ 200,000ƒë',
        discountType: 'fixed',
        discountValue: 20000,
        minOrderValue: 200000,
        quantity: 50,
        used: 0,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 15
      },
      {
        code: 'SPIN10PERCENT',
        description: 'Gi·∫£m 10% t·ªëi ƒëa 50,000ƒë cho ƒë∆°n h√†ng t·ª´ 150,000ƒë',
        discountType: 'percent',
        discountValue: 10,
        minOrderValue: 150000,
        maxDiscountValue: 50000,
        quantity: 30,
        used: 0,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 10
      },
      {
        code: 'SPIN15PERCENT',
        description: 'Gi·∫£m 15% t·ªëi ƒëa 100,000ƒë cho ƒë∆°n h√†ng t·ª´ 300,000ƒë',
        discountType: 'percent',
        discountValue: 15,
        minOrderValue: 300000,
        maxDiscountValue: 100000,
        quantity: 20,
        used: 0,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 5
      }
    ];

    for (const voucherData of sampleVouchers) {
      const existingVoucher = await Voucher.findOne({ code: voucherData.code });
      
      if (!existingVoucher) {
        const voucher = new Voucher(voucherData);
        await voucher.save();
        console.log(`‚úÖ ƒê√£ t·∫°o voucher ${voucherData.code} v·ªõi tr·ªçng s·ªë ${voucherData.weight}`);
      } else {
        // C·∫≠p nh·∫≠t voucher hi·ªán c√≥ ƒë·ªÉ tham gia v√≤ng quay
        existingVoucher.isSpinWheelVoucher = true;
        existingVoucher.weight = voucherData.weight;
        await existingVoucher.save();
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t voucher ${voucherData.code} v·ªõi tr·ªçng s·ªë ${voucherData.weight}`);
      }
    }

    // 3. X√≥a tr∆∞·ªùng spinWheelType kh·ªèi t·∫•t c·∫£ voucher (n·∫øu c√≥)
    const result = await Voucher.updateMany(
      { spinWheelType: { $exists: true } },
      { $unset: { spinWheelType: "" } }
    );
    
    if (result.modifiedCount > 0) {
      console.log(`üóëÔ∏è ƒê√£ x√≥a tr∆∞·ªùng spinWheelType kh·ªèi ${result.modifiedCount} voucher`);
    }

    // 4. Hi·ªÉn th·ªã th·ªëng k√™
    const totalVouchers = await Voucher.countDocuments({ isSpinWheelVoucher: true });
    const totalWeight = await Voucher.aggregate([
      { $match: { isSpinWheelVoucher: true, weight: { $gt: 0 } } },
      { $group: { _id: null, totalWeight: { $sum: "$weight" } } }
    ]);

    console.log('\nüìä Th·ªëng k√™ v√≤ng quay may m·∫Øn:');
    console.log(`- T·ªïng s·ªë voucher tham gia: ${totalVouchers}`);
    console.log(`- T·ªïng tr·ªçng s·ªë: ${totalWeight[0]?.totalWeight || 0}`);
    
    // Hi·ªÉn th·ªã danh s√°ch voucher v√† tr·ªçng s·ªë
    const spinWheelVouchers = await Voucher.find({ isSpinWheelVoucher: true }).select('code description weight');
    console.log('\nüéØ Danh s√°ch voucher v√≤ng quay:');
    spinWheelVouchers.forEach(voucher => {
      console.log(`  - ${voucher.code}: ${voucher.description} (tr·ªçng s·ªë: ${voucher.weight})`);
    });

    console.log('\n‚úÖ Ho√†n th√†nh t·∫°o voucher cho v√≤ng quay may m·∫Øn!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o voucher:', error);
  } finally {
    mongoose.connection.close();
  }
};

// Ch·∫°y script
createSpinWheelVouchers(); 