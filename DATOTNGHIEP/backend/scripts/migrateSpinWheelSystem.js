const mongoose = require('mongoose');
const Voucher = require('../models/voucherModel');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/DB_DATN')
  .then(() => console.log('Connected to MongoDB successfully!'))
  .catch(err => console.error('Failed to connect to MongoDB:', err));

const migrateSpinWheelSystem = async () => {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu migrate h·ªá th·ªëng v√≤ng quay may m·∫Øn...');

    // 1. X√≥a tr∆∞·ªùng spinWheelType kh·ªèi t·∫•t c·∫£ voucher
    const removeSpinWheelTypeResult = await Voucher.updateMany(
      { spinWheelType: { $exists: true } },
      { $unset: { spinWheelType: "" } }
    );
    
    if (removeSpinWheelTypeResult.modifiedCount > 0) {
      console.log(`üóëÔ∏è ƒê√£ x√≥a tr∆∞·ªùng spinWheelType kh·ªèi ${removeSpinWheelTypeResult.modifiedCount} voucher`);
    }

    // 2. Th√™m tr∆∞·ªùng weight cho t·∫•t c·∫£ voucher (m·∫∑c ƒë·ªãnh = 0)
    const addWeightResult = await Voucher.updateMany(
      { weight: { $exists: false } },
      { $set: { weight: 0 } }
    );
    
    if (addWeightResult.modifiedCount > 0) {
      console.log(`‚ûï ƒê√£ th√™m tr∆∞·ªùng weight cho ${addWeightResult.modifiedCount} voucher`);
    }

    // 3. Th√™m tr∆∞·ªùng isSpinWheelVoucher cho t·∫•t c·∫£ voucher (m·∫∑c ƒë·ªãnh = false)
    const addSpinWheelVoucherResult = await Voucher.updateMany(
      { isSpinWheelVoucher: { $exists: false } },
      { $set: { isSpinWheelVoucher: false } }
    );
    
    if (addSpinWheelVoucherResult.modifiedCount > 0) {
      console.log(`‚ûï ƒê√£ th√™m tr∆∞·ªùng isSpinWheelVoucher cho ${addSpinWheelVoucherResult.modifiedCount} voucher`);
    }

    // 4. T·∫°o voucher NO_PRIZE n·∫øu ch∆∞a c√≥
    let noPrizeVoucher = await Voucher.findOne({ code: 'NO_PRIZE' });
    
    if (!noPrizeVoucher) {
      noPrizeVoucher = new Voucher({
        code: 'NO_PRIZE',
        description: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau',
        discountType: 'fixed',
        discountValue: 0,
        minOrderValue: 0,
        quantity: 999999,
        used: 0,
        startDate: new Date('2020-01-01'),
        endDate: new Date('2030-12-31'),
        isActive: true,
        isDeleted: false,
        isSpinWheelVoucher: true,
        weight: 50
      });
      await noPrizeVoucher.save();
      console.log('‚úÖ ƒê√£ t·∫°o voucher NO_PRIZE');
    } else {
      // C·∫≠p nh·∫≠t voucher NO_PRIZE hi·ªán c√≥
      noPrizeVoucher.isSpinWheelVoucher = true;
      noPrizeVoucher.weight = 50;
      await noPrizeVoucher.save();
      console.log('üîÑ ƒê√£ c·∫≠p nh·∫≠t voucher NO_PRIZE');
    }

    // 5. C·∫≠p nh·∫≠t c√°c voucher hi·ªán c√≥ ƒë·ªÉ tham gia v√≤ng quay v·ªõi tr·ªçng s·ªë m·∫∑c ƒë·ªãnh
    const updateExistingVouchers = await Voucher.updateMany(
      { 
        isActive: true, 
        isDeleted: false,
        isSpinWheelVoucher: false,
        // Ch·ªâ c·∫≠p nh·∫≠t voucher c√≥ discountValue > 0 (kh√¥ng ph·∫£i voucher r·ªóng)
        discountValue: { $gt: 0 }
      },
      { 
        $set: { 
          isSpinWheelVoucher: true,
          weight: 10 // Tr·ªçng s·ªë m·∫∑c ƒë·ªãnh cho voucher th∆∞·ªùng
        } 
      }
    );

    if (updateExistingVouchers.modifiedCount > 0) {
      console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t ${updateExistingVouchers.modifiedCount} voucher hi·ªán c√≥ ƒë·ªÉ tham gia v√≤ng quay`);
    }

    // 6. Hi·ªÉn th·ªã th·ªëng k√™ sau migration
    const totalVouchers = await Voucher.countDocuments({ isSpinWheelVoucher: true });
    const totalWeight = await Voucher.aggregate([
      { $match: { isSpinWheelVoucher: true, weight: { $gt: 0 } } },
      { $group: { _id: null, totalWeight: { $sum: "$weight" } } }
    ]);

    console.log('\nüìä Th·ªëng k√™ sau migration:');
    console.log(`- T·ªïng s·ªë voucher tham gia v√≤ng quay: ${totalVouchers}`);
    console.log(`- T·ªïng tr·ªçng s·ªë: ${totalWeight[0]?.totalWeight || 0}`);

    // Hi·ªÉn th·ªã danh s√°ch voucher v√† tr·ªçng s·ªë
    const spinWheelVouchers = await Voucher.find({ isSpinWheelVoucher: true })
      .select('code description weight discountValue discountType')
      .sort({ weight: -1 });

    console.log('\nüéØ Danh s√°ch voucher v√≤ng quay (s·∫Øp x·∫øp theo tr·ªçng s·ªë):');
    spinWheelVouchers.forEach(voucher => {
      const discountInfo = voucher.discountType === 'percent' 
        ? `${voucher.discountValue}%` 
        : `${voucher.discountValue.toLocaleString()}ƒë`;
      console.log(`  - ${voucher.code}: ${voucher.description} (${discountInfo}, tr·ªçng s·ªë: ${voucher.weight})`);
    });

    console.log('\n‚úÖ Ho√†n th√†nh migrate h·ªá th·ªëng v√≤ng quay may m·∫Øn!');
    console.log('\nüí° H∆∞·ªõng d·∫´n c·∫•u h√¨nh:');
    console.log('1. ƒêi·ªÅu ch·ªânh tr·ªçng s·ªë (weight) c·ªßa t·ª´ng voucher ƒë·ªÉ thay ƒë·ªïi x√°c su·∫•t tr√∫ng');
    console.log('2. Tr·ªçng s·ªë c√†ng cao th√¨ x√°c su·∫•t tr√∫ng c√†ng l·ªõn');
    console.log('3. Voucher NO_PRIZE c√≥ tr·ªçng s·ªë 50, b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ƒë·ªÉ thay ƒë·ªïi t·ªâ l·ªá "kh√¥ng tr√∫ng th∆∞·ªüng"');
    console.log('4. T·ªïng tr·ªçng s·ªë hi·ªán t·∫°i:', totalWeight[0]?.totalWeight || 0);

  } catch (error) {
    console.error('‚ùå L·ªói khi migrate:', error);
  } finally {
    mongoose.connection.close();
  }
};

// Ch·∫°y migration
migrateSpinWheelSystem();
