interface Category {
    id: string;
    name: string;
    img: string;
}

// T·∫£i danh s√°ch danh m·ª•c khi trang m·ªü
document.addEventListener("DOMContentLoaded", async () => {
    try {
        const response: Response = await fetch("http://localhost:3000/categories");
        if (!response.ok) throw new Error(`L·ªói t·∫£i danh m·ª•c: ${response.statusText}`);

        const categories: Category[] = await response.json();
        console.log("Danh s√°ch danh m·ª•c:", categories);
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh m·ª•c:", error);
    }
});

const addCategory = async (): Promise<void> => {
    const nameInput = document.getElementById("name") as HTMLInputElement;
    const imageInput = document.getElementById("image") as HTMLInputElement;

    if (!nameInput || !imageInput) {
        console.error("Kh√¥ng t√¨m th·∫•y input!");
        return;
    }

    const name: string = nameInput.value.trim();
    const file: File | undefined = imageInput.files?.[0];

    if (!name || !file) {
        alert("Vui l√≤ng nh·∫≠p t√™n danh m·ª•c v√† ch·ªçn ·∫£nh!");
        return;
    }

    try {
        // üîπ L·∫•y danh s√°ch categories t·ª´ API tr∆∞·ªõc khi t√≠nh to√°n maxId
        const response: Response = await fetch("http://localhost:3000/categories");
        if (!response.ok) throw new Error(`L·ªói t·∫£i danh m·ª•c: ${response.statusText}`);

        const categories: Category[] = await response.json();

        // üîπ X√°c ƒë·ªãnh ID l·ªõn nh·∫•t r·ªìi tƒÉng th√™m 1
        const maxId = categories.length > 0 ? Math.max(...categories.map(c => Number(c.id))) : 0;
        const newId = maxId + 1;

        // üîπ T·∫°o object danh m·ª•c m·ªõi
        const newCategory: Category = { id: String(newId), name, img: file.name };

        // üîπ G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ th√™m danh m·ª•c
        const postResponse: Response = await fetch("http://localhost:3000/categories", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newCategory),
        });

        if (!postResponse.ok) throw new Error(`L·ªói th√™m danh m·ª•c: ${postResponse.statusText}`);

        alert("Th√™m danh m·ª•c th√†nh c√¥ng!");
        window.location.href = "category.html";
    } catch (error) {
        console.error("L·ªói:", error);
        alert("ƒê√£ x·∫£y ra l·ªói!");
    }
};


